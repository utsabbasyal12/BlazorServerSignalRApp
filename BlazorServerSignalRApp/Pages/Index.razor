@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable


<PageTitle>Index</PageTitle>

<section class="msger">
    <header class="msger-header">
        <div class="msger-header-title">
            <i class="fas fa-comment-alt"></i> SimpleChat
        </div>
    </header>
    <main class="msger-chat">
        <div class="msg left-msg">
            <div class="msg-img"
                 style="background-image: url(https://image.flaticon.com/icons/svg/327/327779.svg)"></div>
            <div class="msg-bubble">
                @foreach (var message in messages)
                {
                    <div class="msg-text">
                        @message
                    </div>
                }
            </div>
        </div>
    </main>

    <form class="msger-inputarea">
        <input type="text" @bind="userInput" placeholder="Enter UserName.." />
        <input type="text" class="msger-input" @bind="messageInput" placeholder="Enter your message..." size="50">
    </form>
    <div class="col-md-1">
    <button @onclick="Send" disabled="@(!IsConnected)" class="btn btn-success">Send</button>
    </div>
</section>

@* <div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)" class="msger-send-btn">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul> *@

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}